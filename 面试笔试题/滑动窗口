/*
给一个n*m的矩阵a，下标从1开始，a[i][j]=i*jmod10，然后求所有a*b的子矩阵的最大值和，n不大于1000
*/

/*
方法1：观察法
注意了，矩阵每个元素是0--9，所以，只要滑动窗口一大，滑动窗口里面肯定会有9，就不需要遍历滑动窗口了，直接+9即可
即a>=9 || b>=9 ----> ans = (n-a+1)*(m-b+1)
否则，每次暴力搜索最大值，如下：
for(int i = a;i <= n;i++)
    for(int j = b;j <= m;j++) { // (i, j)为子矩阵右下角坐标
        int temp = 0;
        for(int q = 0;q <a ;q++)
            for(int w = 0;w < b;w++)
                temp = max(temp,z[i-q][j-w]); // 从右下角向内搜索
        ans += temp;
    }
方法2：通用解法（不是太理解）
单调队列
先找出每行每个长度为b小区间的最大值，填在小区间的最右侧
再用上面的数据
纵向找出每个长度为a的小区间的 （横向小区间最大值的) 的最大值，即为滑动窗口的最大值，累加到答案中
作者：2333333333332
链接：https://www.nowcoder.com/discuss/412724?type=all&order=time&pos=&page=1
来源：牛客网

import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.Scanner;
import java.util.jar.JarOutputStream;
 
/**
 * @Author: Shang Huaipeng
 * @Date: 2020/4/20 16:23
 * @Version 1.0
 */
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n=sc.nextInt();
        int m=sc.nextInt();
        int a=sc.nextInt();
        int b=sc.nextInt();
 
        long ans=0;
 
        int hang[][]=new int[n+1][m+1];
        int que[]=new int[1000+10];
        int front=0;
        int tail=0;
        for(int i=1;i<=n;i++){
            front=0;
            tail=0;
            for(int j=1;j<=m;j++){
                while(front<tail&&(i*que[tail-1])%10<=(i*j)%10)tail--;
                que[tail++]=j;
                while(front<tail&&(j-que[front]+1>b))front++;
                hang[i][j]=(i*que[front])%10;
            }
        }
 
        for(int i=b;i<=m;i++){
            front=0;
            tail=0;
            for(int j=1;j<=n;j++){
                while(front<tail&&hang[que[tail-1]][i]<=hang[j][i])tail--;
                que[tail++]=j;
                while(front<tail&&(j-que[front]+1>a))front++;
                if(j>=a){
                   // System.out.println(i+" "+j+" "+hang[que[front]][i]);
                    ans+=1L*hang[que[front]][i];
                }
            }
        }
        System.out.println(ans);
    }
}
*/
